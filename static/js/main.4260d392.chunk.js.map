{"version":3,"sources":["components/transportcontrols.js","components/sequencer-controls.js","components/mixercontrols.js","components/trackselection.js","App.js","serviceWorker.js","index.js"],"names":["TransportControls","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","bpm","playstate","onClick","stopSequencer","startSequencer","Component","SequencerControls","_this","currentnotes","map","box","index","key","event","updateNote","MixerContainer","sequence","volume","target","value","keys","id","defaultValue","onChange","handleChange","type","min","max","step","TrackSelection","switchTrack","size","obj","hasOwnProperty","App","track1","notes","track2","track3","track4","track5","track6","track7","track8","e","setState","console","log","state","updated","updatedMeasure","oldTrack","currenttrack","tracks","pads","transportcontrols","trackselection","mixercontrols","sequencer_controls","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4260d392.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TransportControls extends Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <div className=\"transport-controls-wrapper\">\n                <p>We are playing at {this.props.bpm} bpm and are currently at playstate {this.props.playstate}</p>\n                <button className=\"stop\" onClick={this.props.stopSequencer}>stop</button> \n                <button className=\"play\" onClick={this.props.startSequencer}>play</button>\n            </div>\n        ) \n    }\n}\n\nexport default TransportControls;","import React, { Component } from 'react';\n\nclass SequencerControls extends Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <div className=\"sequencer-wrapper\">\n                {this.props.currentnotes.map((box, index) => \n                    <div key={index} className=\"sequencer-button-wrapper\">\n                        <div className={box==1 ? \"sequencer--button active\" : \"sequencer--button\"} onClick={(event)=>this.props.updateNote(index)}></div>\n                        <label>{index+1}</label>\n                    </div>)}\n            </div>\n        ) \n    }\n}\n\nexport default SequencerControls;","import React, { Component } from 'react';\n\nclass MixerContainer extends Component{\n    constructor(props){\n        super(props);\n    }\n    handleChange(event, key){\n        this.props.sequence[key].volume= event.target.value;\n    }\n    render(){\n        return(\n            <div>\n                {Object.keys(this.props.sequence).map((key)=>\n                <div  key={key} className=\"volumeslider\">\n                    <input id={key} defaultValue={this.props.sequence[key].volume} onChange={(event)=> this.handleChange(event, key)} type=\"range\" min=\"0\" max=\"127\" step=\"1\">\n                    </input>\n                </div>)}\n            </div>\n        ) \n    }\n}\n\nexport default MixerContainer;","import React, { Component } from 'react';\n\nclass TrackSelection extends Component{\n    constructor(props){\n        super(props);\n    }\n    \n\n    render(){\n        return(\n            <div className=\"trackselection-wrapper\">\n                <p>Hola, I am a placeholder for the TrackSelection.</p>\n                {Object.keys(this.props.sequence).map((key)=>\n                        <div key={key} className=\"trackselector-wrapper\"><button  onClick={(event)=>this.props.switchTrack(event, key)}></button>{key}</div>\n                )}\n            </div>\n        ) \n    }\n}\n\nexport default TrackSelection;","import React, { Component } from 'react';\nimport TransportControls from './components/transportcontrols';\nimport SequencerControls from './components/sequencer-controls';\nimport MixerControls from './components/mixercontrols';\nimport TrackSelection from './components/trackselection';\nimport './App.css';\n\nObject.size = function(obj) {\n  var size = 0, key;\n  for (key in obj) {\n      if (obj.hasOwnProperty(key)) size++;\n  }\n  return size;\n};\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      playstate: 0,\n      bpm: 100,\n      tracks: '',\n      pads: 16,\n      currenttrack: \"track1\",\n      currentnotes: [],\n      volume: []\n    }\n  }\n\n  //Main Storage area for our notes in 16 beat time.\n  sequence = {\n    \"track1\":{\n      \"notes\": [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],\n      \"volume\": 127\n          },\n    \"track2\":{\n      \"notes\": [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],\n      \"volume\": 127\n    },\n    \"track3\":{\n      \"notes\": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127\n    },\n    \"track4\":{\n      \"notes\": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127\n    },\n    \"track5\":{\n      \"notes\": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127\n    },\n    \"track6\":{\n      \"notes\": [0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0],\n      \"volume\": 127\n    },\n    \"track7\":{\n      \"notes\": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127\n    },\n    \"track8\":{\n      \"notes\": [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127\n    }\n  }\n\n  stopSequencer=(e)=>{\n    this.setState({playstate: 0});\n    console.log(this.state.playstate);\n  }\n\n  startSequencer=(e)=>{\n    this.setState({playstate: 1});\n    console.log(this.state.playstate);\n    console.log(this.sequence.track1.volume);\n  }\n\n  updateNote=(index)=>{\n    let updated= + !this.state.currentnotes[index];\n    let updatedMeasure = this.state.currentnotes;\n    updatedMeasure[index]=updated;\n    console.log(updated);\n    this.setState({\n        currentnotes: updatedMeasure\n    });\n  }\n\n  switchTrack=(event, key)=>{\n    let oldTrack = this.state.currenttrack;\n    this.sequence[oldTrack].notes=this.state.currentnotes; //Update our master sequence\n    console.log(this.sequence[key].notes);\n    this.setState({ \n      currentnotes: this.sequence[key].notes,\n      currenttrack: key\n    });\n  }\n\n  componentDidMount(){\n    this.setState({\n        tracks: Object.size(this.sequence),\n        currentnotes: this.sequence.track1.notes\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TransportControls\n          playstate={this.state.playstate}\n          bpm={this.state.bpm}\n          stopSequencer = {this.stopSequencer}\n          startSequencer = {this.startSequencer}\n        />\n        <TrackSelection\n          currenttrack={this.state.currenttrack}\n          sequence={this.sequence}\n          switchTrack={this.switchTrack}\n        />\n        <MixerControls\n          tracks={this.state.tracks}\n          sequence={this.sequence}\n          />\n        <SequencerControls \n          pads={this.state.pads}\n          currenttrack={this.state.currenttrack}\n          currentnotes={this.state.currentnotes}\n          sequence={this.sequence}\n          updateNote={this.updateNote}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}