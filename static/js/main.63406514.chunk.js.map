{"version":3,"sources":["components/transportcontrols.js","components/sequencer-controls.js","components/mixercontrols.js","components/trackselection.js","App.js","serviceWorker.js","index.js"],"names":["TransportControls","react_default","a","createElement","className","this","props","bpm","playstate","onClick","stopSequencer","startSequencer","Component","SequencerControls","_this","currentnotes","map","box","index","key","event","updateNote","MixerContainer","sequence","volume","target","value","Object","keys","id","defaultValue","onChange","handleChange","type","min","max","step","TrackSelection","switchTrack","size","obj","hasOwnProperty","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","track1","notes","sample","track2","track3","track4","track5","track6","track7","track8","setState","Tone","Transport","stop","start","updated","state","updatedMeasure","oldTrack","currenttrack","fireIt","startLoop","time","track","reduce","srch","i","push","steps","scheduleOnce","tracks","pads","ourObj","Player","toMaster","initializeSounds","schedule","loop","loopEnd","transportcontrols","trackselection","mixercontrols","sequencer_controls","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63406514.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TransportControls extends Component{\n    \n    render(){\n        return(\n            <div className=\"transport-controls-wrapper\">\n                <p>We are playing at {this.props.bpm} bpm and are currently at playstate {this.props.playstate}</p>\n                <button className=\"stop\" onClick={this.props.stopSequencer}>stop</button> \n                <button className=\"play\" onClick={this.props.startSequencer}>play</button>\n            </div>\n        ) \n    }\n}\n\nexport default TransportControls;","import React, { Component } from 'react';\n\nclass SequencerControls extends Component{\n    render(){\n        return(\n            <div className=\"sequencer-wrapper\">\n                {this.props.currentnotes.map((box, index) => \n                    <div key={index} className=\"sequencer-button-wrapper\">\n                        <div className={box===1 ? \"sequencer--button active\" : \"sequencer--button\"} onClick={(event)=>this.props.updateNote(index)}></div>\n                        <label>{index+1}</label>\n                    </div>)}\n            </div>\n        ) \n    }\n}\n\nexport default SequencerControls;","import React, { Component } from 'react';\n\nclass MixerContainer extends Component{\n\n    handleChange(event, key){\n        this.props.sequence[key].volume= event.target.value;\n    }\n    render(){\n        return(\n            <div>\n                {Object.keys(this.props.sequence).map((key)=>\n                <div  key={key} className=\"volumeslider\">\n                    <input id={key} defaultValue={this.props.sequence[key].volume} onChange={(event)=> this.handleChange(event, key)} type=\"range\" min=\"0\" max=\"127\" step=\"1\">\n                    </input>\n                </div>)}\n            </div>\n        ) \n    }\n}\n\nexport default MixerContainer;","import React, { Component } from 'react';\n\nclass TrackSelection extends Component{\n\n    render(){\n        return(\n            <div className=\"trackselection-wrapper\">\n                {Object.keys(this.props.sequence).map((key)=>\n                        <div key={key} className=\"trackselector-wrapper\"><button onClick={(event)=>this.props.switchTrack(event, key)}>{key}</button></div>\n                )}\n            </div>\n        ) \n    }\n}\n\nexport default TrackSelection;","import React, { Component } from 'react';\nimport Tone from 'tone';\nimport TransportControls from './components/transportcontrols';\nimport SequencerControls from './components/sequencer-controls';\nimport MixerControls from './components/mixercontrols';\nimport TrackSelection from './components/trackselection';\nimport './App.css';\n\nObject.size = function(obj) {\n  var size = 0, key;\n  for (key in obj) {\n      if (obj.hasOwnProperty(key)) size++;\n  }\n  return size;\n};\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      playstate: 0,\n      bpm: 128,\n      tracks: '',\n      pads: 16,\n      currenttrack: \"track1\",\n      currentnotes: [],\n      volume: []\n    }\n  }\n\n  //Main Storage area for our notes in 16 beat time.\n  sequence = {\n    \"track1\":{\n      \"notes\": [1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0],\n      \"volume\": 127,\n      \"sample\": \"./samples/909/BD.wav\"\n          },\n    \"track2\":{\n      \"notes\": [0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0],\n      \"volume\": 127,\n      \"sample\": \"./samples/909/Snaredrum.wav\"\n    },\n    \"track3\":{\n      \"notes\": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127,\n      \"sample\": \"./samples/909/Rimshot.wav\"\n    },\n    \"track4\":{\n      \"notes\": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127,\n      \"sample\": \"./samples/909/Clap.wav\"\n    },\n    \"track5\":{\n      \"notes\": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127,\n      \"sample\": \"./samples/909/CH.wav\"\n    },\n    \"track6\":{\n      \"notes\": [0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0],\n      \"volume\": 127,\n      \"sample\": \"./samples/909/OH.wav\"\n    },\n    \"track7\":{\n      \"notes\": [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127,\n      \"sample\": \"./samples/909/Crash.wav\"\n    },\n    \"track8\":{\n      \"notes\": [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],\n      \"volume\": 127,\n      \"sample\": \"./samples/909/Ride.wav\"\n    }\n  }\n\n  // sampleplayer = Object(this.sequence).map((key)=> \n  //    let player[key] = new Tone.Player(this.sequence[key].sample).toMaster()\n  // );\n  //initialize our sequence object with a function call for a player \n  initializeSounds(ourObj){\n    Object.keys(ourObj).map((track, index)=>{\n      ourObj[track].fireIt= new Tone.Player(ourObj[track].sample).toMaster(); //Change this to sample at some point?\n      return true;\n    });\n  }\n  stopSequencer=()=>{\n    this.setState({playstate: 0});\n    Tone.Transport.stop();\n  }\n\n  startSequencer=()=>{\n    this.setState({playstate: 1});\n    Tone.Transport.start();\n  }\n\n  updateNote=(index)=>{\n    let updated= + !this.state.currentnotes[index];\n    let updatedMeasure = this.state.currentnotes;\n    updatedMeasure[index]=updated;\n    this.setState({\n        currentnotes: updatedMeasure\n    });\n  }\n\n  //Update our master sequencer track to selected, and save the old one\n  switchTrack=(event, key)=>{\n    let oldTrack = this.state.currenttrack;\n    this.sequence[oldTrack].notes=this.state.currentnotes; \n    this.setState({ \n      currentnotes: this.sequence[key].notes,\n      currenttrack: key\n    });\n    if(this.state.playstate!==1){\n      this.sequence[key].fireIt.start();\n    }\n  }\n\n  componentDidMount(){\n    // StartAudioContext(Tone.context);\n    this.initializeSounds(this.sequence);\n    this.setState({\n        tracks: Object.size(this.sequence),\n        currentnotes: this.sequence.track1.notes\n      });\n    Tone.Transport.bpm.value = this.state.bpm;\n    Tone.Transport.schedule(this.startLoop, \"0:0:0\");\n    Tone.Transport.loop = true;\n    Tone.Transport.loopEnd = '1m';\n\n  }\n  startLoop = (time: number) => {\n    // console.log(\"Start loop \", time)\n    // this.sequence.track1.fireIt.start(time);\n    // this.sequence.track1.fireIt.start(time + 0.5);\n    // this.sequence.track1.fireIt.start(time + 1);\n    // this.sequence.track1.fireIt.start(time + 1.5);\n  //   Tone.Transport.schedule((time)=>{\n  //       this.sequence.track1.fireIt.start(time);\n  //   },\"0:0:1\");\n  //   Tone.Transport.schedule((time)=>{\n  //     this.sequence.track1.fireIt.start(time);\n  // },\"0:0:5\")\n  //   Tone.Transport.schedule((time)=>{\n  //     this.sequence.track1.fireIt.start(time);\n  // },\"0:0:9\")\n  //   Tone.Transport.schedule((time)=>{\n  //     this.sequence.track1.fireIt.start(time);\n  //   },\"0:0:13\")\n    Object.keys(this.sequence).map((track)=>{\n      let reducedSteps = this.sequence[track].notes.reduce(function(a, srch, i){ if(srch === 1)a.push(i+1); return a;},[]);\n      // console.log(deviceson);\n      reducedSteps.map((steps)=>{\n          Tone.Transport.scheduleOnce((time)=>{\n            this.sequence[track].fireIt.start(time);\n          },\"0:0:\"+steps);\n      });\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <TransportControls\n          playstate={this.state.playstate}\n          bpm={this.state.bpm}\n          stopSequencer = {this.stopSequencer}\n          startSequencer = {this.startSequencer}\n        />\n        <TrackSelection\n          currenttrack={this.state.currenttrack}\n          sequence={this.sequence}\n          switchTrack={this.switchTrack}\n        />\n        <MixerControls\n          tracks={this.state.tracks}\n          sequence={this.sequence}\n          />\n        <SequencerControls \n          pads={this.state.pads}\n          currenttrack={this.state.currenttrack}\n          currentnotes={this.state.currentnotes}\n          sequence={this.sequence}\n          updateNote={this.updateNote}\n          />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}